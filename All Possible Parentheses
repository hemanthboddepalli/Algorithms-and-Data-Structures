

//All Possible Parentheses
//Print all parentheses combinations for a given value n such that they are balanced. Here are a few examples.
//


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Node{
    int x,y;
    public Node(int x, int y){
        this.x = x;
        this.y = y;
    }
}

class ListNode{
    ListNode next = null;
    int val;
    public ListNode(int val){
        this.val = val;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

 class Interval {
    int start;
    int end;
    Interval() { start = 0; end = 0; }
    Interval(int s, int e) { start = s; end = e; }
 }

public class Solution {
    public static void main(String[] args) {
        new Solution().paranthesis(4);
    }
    
    public void paranthesis(int n){
        printParanthesis(n,0,0,"");
    }
    
    private void printParanthesis(int n, int left, int right, String str){
        if(left>=n && right >=n){
            System.out.println(str);
            return;
        }
        
        if(left < n){
            printParanthesis(n,left+1,right,str + '{');
        }
        
        if(left<=right){
            return;
        }
        
        if(right < n){
            printParanthesis(n,left,right+1,str + '}');
        }
    }
    
}
