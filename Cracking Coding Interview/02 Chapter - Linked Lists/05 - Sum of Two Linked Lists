import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

// Recursive and Non-Resursive approach for adding two numbers in a linked list and return the result as a linked list- Cracking coding Interview.
class Node{
    int data;
    Node next=null;
    public Node(int d){
        this.data = d;
    }
    public void appendToTail(int d){
        Node newNode = new Node(d);
        Node head = this;
        while(head.next!=null){
            head = head.next;
        }
        head.next = newNode;
    }
    public void iterate(Node node){
        Node head = node;
        while(head!=null){
            System.out.print(head.data+"-->");
            head = head.next;
        }
        System.out.print("null");
        System.out.println();
    }
    public int length(Node node){
        Node head = node;
        int count = 0;
        while(head!=null){
            count +=1;
            head = head.next;
        }
        return count;
    }
    public Node sum_normal_recursive(Node l1, Node l2, int carry){
        if(l1==null && l2==null && carry==0){
            return null;
        }
        Node node = new Node(carry);
        int value = carry;
        if(l1!=null){
            value = value + l1.data;
        }
        if(l2!=null){
            value = value + l2.data;
        }
        node.data = value%10;
        int carie = value/10;
        if(l1!=null || l2!=null || carie!=0){
            node.next = sum_normal_recursive(l1==null ? null:l1.next,l2==null ? null: l2.next,carie);
        }
        return node;
    }

    public Node sum_normal_non_recursive(Node l1, Node l2){
        int count = 0; int num1 = 0;
        while(l1!=null){
            int temp = (int)Math.pow(10,count);
            num1 = num1 + l1.data*temp;
            l1 = l1.next;
            count++;
        }

        count = 0; int num2=0;
        while(l2!=null){
            int temp = (int)Math.pow(10,count);
            num2 = num2 + l2.data*temp;
            l2 = l2.next;
            count++;
        }

        int res = num1 + num2;
        Node head = new Node(res%10);
        res = res/10;
        while(res!=0){
            head.appendToTail(res%10);
            res = res/10;
        }
        return head;
    }
}

//  Recursive and Non-Resursive approach for adding two numbers in a linked list and return the result as a linked list.
public class Solution {

    public static void main(String[] args) {
        Node head1 = new Node(7);
        head1.appendToTail(1);
        head1.appendToTail(6);
        System.out.println("Linked list 1: ");
        head1.iterate(head1);
        Node head2 = new Node(5);
        head2.appendToTail(9);
        head2.appendToTail(2);
        System.out.println("Linked list 2: ");
        head2.iterate(head2);

        Node res_normal_recursive = head2.sum_normal_recursive(head1, head2, 0);
        System.out.println("Result of sum_normal_recursive: ");
        head2.iterate(res_normal_recursive);

        Node res_normal_non_recursive = head2.sum_normal_non_recursive(head1, head2);
        System.out.println("Result of sum_normal_non_recursive: ");
        head2.iterate(res_normal_non_recursive);
    }
}
