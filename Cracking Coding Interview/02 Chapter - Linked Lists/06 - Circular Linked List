import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

// Circular Linked List - Return the node at the beginning of the loop - Cracking coding Interview.
class Node{
    int data;
    Node next=null;
    public Node(int d){
        this.data = d;
    }
    public void appendToTail(int d){
        Node newNode = new Node(d);
        Node head = this;
        while(head.next!=null){
            head = head.next;
        }
        head.next = newNode;
    }
    public void iterate(Node node){
        Node head = node;
        while(head!=null){
            System.out.print(head.data+"-->");
            head = head.next;
        }
        System.out.print("null");
        System.out.println();
    }
    public int length(Node node){
        Node head = node;
        int count = 0;
        while(head!=null){
            count +=1;
            head = head.next;
        }
        return count;
    }

    public void circular(Node head){
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow==fast){
                break;
            }
        }

        if(fast==null || fast.next==null){
            System.out.println("Not a circular linked list");
            return;
        }

        fast = head;
        while(slow!=fast){
            slow = slow.next;
            fast = fast.next;
        }
        System.out.println(slow.data);
    }

}

///  Circular Linked List - Return the node at the beginning of the loop.
public class Solution {

    public static void main(String[] args) {
        Node head = new Node(0);
        Node n1 = new Node(1);
        head.next = n1;
        Node n2 = new Node(2);
        n1.next = n2;
        Node n3 = new Node(3);
        n2.next = n3;
        Node n4 = new Node(4);
        n3.next = n4;
        n4.next = n3;
        head.circular(head);
    }
}
