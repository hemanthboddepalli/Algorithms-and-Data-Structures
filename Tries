package specialproject;

import java.util.HashMap;
import java.util.Scanner;

class TrieNode{
    char c;
    HashMap<Character,TrieNode> children = new HashMap<Character,TrieNode>();
    boolean isLast;
    int count;
    
    public TrieNode(){
        
    }
    
    public TrieNode(char c){
        this.c = c;
    }
}

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        TrieNode root = new TrieNode();
        for(int a0 = 0; a0 < n; a0++){
            String op = in.next();
            String contact = in.next();
            
            if(op.equals("add")){
                addName(root, contact);
            }
            else if(op.equals("delete")){
                System.out.println(delete(root, contact, 0));
            }
	        else{
	        	findPartial(root,contact);
	        }
        }
    }
    
    public static void addName(TrieNode root, String input){
        
        TrieNode node = root; 
        HashMap<Character,TrieNode> child = node.children;
        
        for(int i=0; i<input.length(); i++) {
            char ch = input.charAt(i);
            if(child.get(ch) != null) {
                node = child.get(ch);
                node.count++;
            }
            else{
                node = new TrieNode(ch);
                child.put(ch,node);
                node.count=1;
            }
            child = node.children;
        }
        node.isLast = true;
    }
    
    public static boolean delete(TrieNode root, String input, int index){
    	
    	if(index==input.length()){
    		if(root.isLast){
    			return true;
    		}
    		else{
    			return false;
    		}
    	}
    	
    	boolean res = false;
    	HashMap<Character,TrieNode> child = root.children;
    	char ch = input.charAt(index);
    	if(child.get(ch)==null){
    		return res;
    	}
    	TrieNode node = child.get(ch);
    	res = delete(node, input, index+1);
    	if(res){
    		if(node.count==1){
    			child.remove(ch);
    		}
    		else{
    			node.count--;
    		}
    	}
        return res;        
    }
    
    public static void findPartial(TrieNode root, String input){
        
        TrieNode node = root; 
        HashMap<Character,TrieNode> child = node.children;
        int res = 0;
        for(int i=0; i<input.length(); i++) {
            char ch = input.charAt(i);
            if(child.get(ch) != null){
                node = child.get(ch);
                res = node.count;
                child = node.children;
            }
            else{
                System.out.println(0);
                return;
            }
        }
        System.out.println(res);
    }
}
